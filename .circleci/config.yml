version: 2.1
orbs:
  slack: circleci/slack@4.12.1
  aws-cli: circleci/aws-cli@3.1.4

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: "Destroy workspace environemnt"
          when: on_fail
          command: |
            echo "Destroying workspace <<parameters.workflow_id>>"
            aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            aws cloudformation delete-stack --stack-name "udapeople-frontend-<<parameters.workflow_id>>"
            aws cloudformation delete-stack --stack-name "udapeople-backend-<<parameters.workflow_id>>"
            

  revert-migration:
    description: Revert database migration.
    steps:
      - run:
          name: "Revert database migration"
          when: on_fail
          command: |
            echo "Reverting migration"
            cd backend
            npm install
            npm run migrations:revert

jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend && \
            npm install && \
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Run frontend test"
          command: |
            cd frontend && \
            npm install && \
            npm run test

  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Run backend test"
          command: |
            cd backend && \
            npm install && \
            npm run test

  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: "Run frontend scan"
          command: |
            cd frontend && \
            npm install && \
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical
      - slack/notify:
          template: basic_fail_1
          event: fail
      - slack/notify:
          template: success_tagged_deploy_1
          event: pass

  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: "Run backend scan"
          command: |
            cd backend && \
            npm install && \
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical
      - slack/notify:
          template: basic_fail_1
          event: fail
      - slack/notify:
          template: success_tagged_deploy_1
          event: pass

  deploy-infrastructure:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo backend ansible_host=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text) >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

  configure-infrastructure:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - add_ssh_keys:
          fingerprints: ["af9:8b:25:f2:1b:3e:40:dd:91:5b:49:86:11:3e:1a:36"]
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt -y install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt -y install ansible
            ansible --version
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            ansible-playbook .circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  run-migrations:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt -y install nodejs
      - restore_cache:
          keys: [backend_build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl --insecure https://kvdb.io/QNxYTTzUe5zcXdiMuAEkRA/migration_${CIRCLE_WORKFLOW:0:7} -d '1'
            fi
  
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-frontend:
    executor: aws-cli/default
    steps:
      - checkout
      - aws-cli/setup
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt -y install nodejs
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text)

            export API_URL="http://${BACKEND_IP}:3030"

            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env

      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
      
      - revert-migration


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
         requires:
           - build-frontend
      - test-backend:
         requires:
           - build-backend
      - scan-frontend:
         context: udacity-project3
         requires:
           - build-frontend
      - scan-backend:
         context: udacity-project3
         requires:
           - build-backend
      - deploy-infrastructure:
         requires:
           - test-backend
           - test-frontend
           - scan-backend
           - scan-frontend
         filters:
           branches:
             only:
               - master
      - configure-infrastructure:
         requires:
           - deploy-infrastructure
      - run-migrations:
         requires:
           - configure-infrastructure
      - deploy-frontend:
         requires:
           - run-migrations